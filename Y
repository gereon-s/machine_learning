import pandas as pd
import statsmodels.api as sm
from statsmodels.tsa.ardl import ARDL
import matplotlib.pyplot as plt

# Assuming 'merged_df' contains the differenced series 'DXY_diff' and 'Trump_diff'

# Step 1: Fit the ARDL model
# We specify the number of lags for the dependent variable (DXY_diff) and the independent variable (Trump_diff)
# lags=(p, [q]) means p lags for DXY and q lags for Trump's odds

model = ARDL(endog=merged_df['DXY_diff'], exog=merged_df[['Trump_diff']], lags=(2, [2]))

# Fit the model
result = model.fit()

# Step 2: Print the ARDL model summary to see the effect of Trump's odds (both contemporaneous and lagged)
print(result.summary())

# Step 3: Impulse Response Function (IRF)
# This will show how a one-time shock to Trump's odds affects DXY over time
irf = result.irf(10)  # Simulate the response for 10 periods ahead

# Plot the Impulse Response
irf.plot(orth=False)
plt.title("Impulse Response: Effect of Trump's Odds on DXY")
plt.show()

# Step 4: Forecast future DXY values based on the ARDL model (optional)
forecast = result.forecast(steps=5)
print(forecast)

# Plot the forecasted DXY values
plt.figure(figsize=(10,6))
plt.plot(forecast, label="Forecasted DXY", color='blue')
plt.title("Forecasted DXY Based on Trump's Odds")
plt.legend()
plt.show()





xxxx


from statsmodels.tsa.ardl import ARDL

# Define the model with lagged values for Trump's odds
# ARDL(p, q) where p is the lag of DXY and q is the lag of Trump's odds
# Use lag_order=(2,2) to include 2 lags for both DXY and Trump's odds
model = ARDL(merged_df['DXY_diff'], lags=2, exog=merged_df['Trump_diff'], order=(2, 2))

# Fit the model
result = model.fit()

# Print the summary to see the coefficients for both current and lagged values of Trump's odds
print(result.summary())

import pandas as pd
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.ardl import ARDL
import matplotlib.pyplot as plt

# Step 1: Function to check for stationarity
def check_stationarity(series, signif=0.05):
    result = adfuller(series.dropna())  # ADF test
    p_value = result[1]
    if p_value < signif:
        print(f"{series.name} is stationary (p-value = {p_value})")
    else:
        print(f"{series.name} is non-stationary (p-value = {p_value})")
    return p_value

# Step 2: Check stationarity of DXY and Trump's odds
pval_dxy = check_stationarity(merged_df['DXY'])
pval_trump = check_stationarity(merged_df['Trump'])

# Step 3: Differencing non-stationary variables if necessary
# ARDL can handle I(0) and I(1), so only difference if p-value > 0.05
if pval_dxy > 0.05:
    merged_df['DXY_diff'] = merged_df['DXY'].diff().dropna()
else:
    merged_df['DXY_diff'] = merged_df['DXY']

if pval_trump > 0.05:
    merged_df['Trump_diff'] = merged_df['Trump'].diff().dropna()
else:
    merged_df['Trump_diff'] = merged_df['Trump']

# Step 4: Fit the ARDL Model
# Let's use DXY as the dependent variable and Trump's odds as the independent variable
# Note: p=number of lags for the dependent variable, q=number of lags for the independent variable

# Drop NaN values after differencing
merged_df = merged_df.dropna(subset=['DXY_diff', 'Trump_diff'])

# Use ARDL with automatic lag selection (BIC criteria)
# ARDL(p,q) where p is lags of DXY (dependent) and q is lags of Trump_diff (independent)
model = ARDL(merged_df['DXY_diff'], lags=2, exog=merged_df[['Trump_diff']])  # Adjust lags as needed

# Fit the model
result = model.fit()

# Print the ARDL model summary
print(result.summary())

# Step 5: Plot Residuals to Check Model Fit
plt.figure(figsize=(10,6))
plt.plot(result.resid, label='Residuals')
plt.axhline(0, linestyle='--', color='black', linewidth=1)
plt.title("ARDL Model Residuals")
plt.legend()
plt.show()

# Step 6: Impulse Response (Optional)
# You can also plot impulse response or simulate how DXY responds to shocks in Trump's odds
